********************************************************************************************************************
 ************************************* TYPESCRIPT PARA ANGULAR **************************************************
********************************************************************************************************************

	**INTRODUÇÃO**

		-O QUE VEM POR AI

			TypeScript - Tipar o JavaScript
	 
			Todas as versões atulizadas do angular utilizam o TypeScript
	 
		-O QUE É E POR QUE VOCÊ DEVERIA UTILIZAR TYPESCRIPT
		
			Tony Stark - JS
			
			Homem de Ferro - TS
			
			Caracteristicas 
			
				-Tipar - Declarar quais tipos as variveis deve aceitar
			
				-Class - cria classes
			 
				-Interfaces - Contrato

				-Enum - Enumerador

				-Consegue ver os seus erros em tempo de desenvolvimento
			
				-Todo lugar onde vc utilizar JavaScript , aceita o TypeScript
				
			O TypeScript transpila para o JavaScript através do Node
			
		-VENDO NA PRÁTICA A MAIOR VANTAGEM DO TypeScript
		
	**INSTALANDO O TYPESCRIPT**	

		-INSTALANDO TYPESCRIPT LOCALMENTE 
		
			npm init -y
			npm install typescript -D  ---Dependencia de dev
			
			new file com extensão.ts
			
		-COMO RODAR O CÓDIGO TYPESCRIPT
		
			console.log("ola mundo");
			
			node src/index.ts  - por que o console.log  é um comando do JavaScript,agora se usarmos um código
			tipicio do TypeScript e usar o node dará erro:
			
			type heroi = {
				name: string;
				vulgo: string;
				};
				
			console.log("ola mundo);

			Para rodar o código acima temos que converter o o codigo em JavaScript	com o comando:
			
			npx tsc src/index.ts
			
		-CRIANDO E CONFIGURANDO O ARQUIVO TSCONFIG**
		
			Para não ter que converter o arquivo TS para o arquivo JS vamos criar um arquivo de configuração do TS para converter em massa:
			
			npx tsc --init  --cria arquivo tsconfig.json onde podemos habilitar e desabilitar as configurações
			
			Para verificar o que pode ou não configurar dentro do json acesse o site oficial 
			
			typescriptlang.org e acesse tools > tsconfig reference
			
			Configuramos o para dentro de Modules o rootDir para a pasta src e o outDir para a pasta build.
			
			No site na opção Playground , tsconfig, podemos simular habilitando e desabilitando as configurações da mesma
			
			
		-CRIANDO UM SCIPT DE EXECUÇÃO**


			vamos criar um script dentro do package.json para executar o npx tsc e o node:
			
			  "scripts": {
				"start":"npx tsc && node build/index.js",
				"test": "echo \"Error: no test specified\" && exit 1"
			  },
			  
			  e para executar esse script :
			  
			  npx run start
			  
	** TIPOS NO TYPESCRIPT** 

		-TRABALHANDO COM TIPOS DE VARIÁVEIS
		
			Tipos de Variaveis :	
			
			//tipos primitivos: boolean, number, string
			
			let ligado:boolean = false;  OU let ligado = false;
			let nome:string = "William"; OU let nome = "William";
			let idade:number = 40; OU let idade = 40;
			let altura:number = 1.87; OU let altura = 1.87;
			
			//tipos especiais : null, undefined
			
			let nulo:null = null; OU let nulo = null;
			let indefinido: undefined; Ou let indefinido = undefined;
			
			//tipos abrangentes: any, void
			
			let retorno:void 
			
			Ex: 
				function executaQuery(): void{
				
				}

			let retornoView:any = aceita qualquer coisa	
			
			Utilizamos quando temos uma função que pode trazer um valor imprevisível
		
		-TRABALHANDO COM OBJECTS
	
			//objeto
			let produto:object ={  /*porém não é uma boa prática passar o objeto com previsibilidade*/
				name:"William",
				cidade:"Franca",
				idade: 40,
			};
			
			//objeto - sem previsibilidade (shapeado, ou tipado)
			
			type ProdutoLoja = {
				nome:string;
				preco:number;
				unidades:number;
			};
			
			let meuProduto: ProdutoLoja = {
				nome: "Tênis",
				preco:89.99,
				unidades: 5,
			};
		
		-TRABALHANDO COM ARRAYS
		
			let dados: string[] = ["William", "Caroline", "Alice"];
							
							ou
							
			let dados2: Array<string> = ["William", "Caroline", "Alice"];
		
		-TRABALHANDO COM ARRAYS DE MULTYPES
		
			let infos: (string | number)[] = ["William", 40,"Caroline", 42, "Alice", 7]; //em qualquer ordem
		
		-TRABALHANDO COM TUPLAS
		
			let boleto:[string, number, number] =["conta de agua", 89.9, 321456798] //tem que seguir a ordem definida
		
		
		-REAPROVEITANDO CONHECIMENTOS EM JAVASCRIPT
		
			Metodos de arrays
			
			Todos os metodos que vc aprendeu no JavaScript serve para o TypeScript
			
			Ex:
			
				let dados: string[] = ["William", "Caroline", "Alice"];
				
				dados.pop();....

		-TRABALHANDO COM DATES

			let aniversario:Date = Date("2023-05-17 10:05");
			console.log(aniversario.toString());
			
			npm run start
			
	**FUNÇOES**

		-FUNÇÕES
		
			
			
			
		
		
		
		
		
		
		
		
		
		
		
		
							
		
		
		
		
		
		
		
		
			
		  

		
		
		
		
		
		
		
		
		
		
	
		
		
			
	

		
		