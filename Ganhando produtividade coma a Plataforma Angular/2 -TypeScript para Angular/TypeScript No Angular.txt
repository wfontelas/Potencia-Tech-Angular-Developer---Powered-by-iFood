********************************************************************************************************************
 ************************************* TYPESCRIPT PARA ANGULAR **************************************************
********************************************************************************************************************

	**INTRODUÇÃO**

		-O QUE VEM POR AI

			TypeScript - Tipar o JavaScript
	 
			Todas as versões atulizadas do angular utilizam o TypeScript
	 
		-O QUE É E POR QUE VOCÊ DEVERIA UTILIZAR TYPESCRIPT
		
			Tony Stark - JS
			
			Homem de Ferro - TS
			
			Caracteristicas 
			
				-Tipar - Declarar quais tipos as variveis deve aceitar
			
				-Class - cria classes
			 
				-Interfaces - Contrato

				-Enum - Enumerador

				-Consegue ver os seus erros em tempo de desenvolvimento
			
				-Todo lugar onde vc utilizar JavaScript , aceita o TypeScript
				
			O TypeScript transpila para o JavaScript através do Node
			
		-VENDO NA PRÁTICA A MAIOR VANTAGEM DO TypeScript
		
	**INSTALANDO O TYPESCRIPT**	

		-INSTALANDO TYPESCRIPT LOCALMENTE 
		
			npm init -y
			npm install typescript -D  ---Dependencia de dev
			
			new file com extensão.ts
			
		-COMO RODAR O CÓDIGO TYPESCRIPT
		
			console.log("ola mundo");
			
			node src/index.ts  - por que o console.log  é um comando do JavaScript,agora se usarmos um código
			tipicio do TypeScript e usar o node dará erro:
			
			type heroi = {
				name: string;
				vulgo: string;
				};
				
			console.log("ola mundo);

			Para rodar o código acima temos que converter o o codigo em JavaScript	com o comando:
			
			npx tsc src/index.ts
			
		-CRIANDO E CONFIGURANDO O ARQUIVO TSCONFIG**
		
			Para não ter que converter o arquivo TS para o arquivo JS vamos criar um arquivo de configuração do TS para converter em massa:
			
			npx tsc --init  --cria arquivo tsconfig.json onde podemos habilitar e desabilitar as configurações
			
			Para verificar o que pode ou não configurar dentro do json acesse o site oficial 
			
			typescriptlang.org e acesse tools > tsconfig reference
			
			Configuramos o para dentro de Modules o rootDir para a pasta src e o outDir para a pasta build.
			
			No site na opção Playground , tsconfig, podemos simular habilitando e desabilitando as configurações da mesma
			
			
		-CRIANDO UM SCIPT DE EXECUÇÃO**


			vamos criar um script dentro do package.json para executar o npx tsc e o node:
			
			  "scripts": {
				"start":"npx tsc && node build/index.js",
				"test": "echo \"Error: no test specified\" && exit 1"
			  },
			  
			  e para executar esse script :
			  
			  npx run start
			  
	** TIPOS NO TYPESCRIPT** 

		-TRABALHANDO COM TIPOS DE VARIÁVEIS
		
			Tipos de Variaveis :	
			
			//tipos primitivos: boolean, number, string
			
			let ligado:boolean = false;  OU let ligado = false;
			let nome:string = "William"; OU let nome = "William";
			let idade:number = 40; OU let idade = 40;
			let altura:number = 1.87; OU let altura = 1.87;
			
			//tipos especiais : null, undefined
			
			let nulo:null = null; OU let nulo = null;
			let indefinido: undefined; Ou let indefinido = undefined;
			
			//tipos abrangentes: any, void
			
			let retorno:void 
			
			Ex: 
				function executaQuery(): void{
				
				}

			let retornoView:any = aceita qualquer coisa	
			
			Utilizamos quando temos uma função que pode trazer um valor imprevisível
		
		-TRABALHANDO COM OBJECTS
	
			//objeto
			let produto:object ={  /*porém não é uma boa prática passar o objeto com previsibilidade*/
				name:"William",
				cidade:"Franca",
				idade: 40,
			};
			
			//objeto - sem previsibilidade (shapeado, ou tipado)
			
			type ProdutoLoja = {
				nome:string;
				preco:number;
				unidades:number;
			};
			
			let meuProduto: ProdutoLoja = {
				nome: "Tênis",
				preco:89.99,
				unidades: 5,
			};
		
		-TRABALHANDO COM ARRAYS
		
			let dados: string[] = ["William", "Caroline", "Alice"];
							
							ou
							
			let dados2: Array<string> = ["William", "Caroline", "Alice"];
		
		-TRABALHANDO COM ARRAYS DE MULTYPES
		
			let infos: (string | number)[] = ["William", 40,"Caroline", 42, "Alice", 7]; //em qualquer ordem
		
		-TRABALHANDO COM TUPLAS
		
			let boleto:[string, number, number] =["conta de agua", 89.9, 321456798] //tem que seguir a ordem definida
		
		
		-REAPROVEITANDO CONHECIMENTOS EM JAVASCRIPT
		
			Metodos de arrays
			
			Todos os metodos que vc aprendeu no JavaScript serve para o TypeScript
			
			Ex:
			
				let dados: string[] = ["William", "Caroline", "Alice"];
				
				dados.pop();....

		-TRABALHANDO COM DATES

			let aniversario:Date = Date("2023-05-17 10:05");
			console.log(aniversario.toString());
			
			npm run start
			
	**FUNÇOES**

		-FUNÇÕES
		
			//funções
			function addNumber(x : number, y: number ): number {
				return x + y;
			}

			let soma: number = addNumber(4, 7);

			console.log(soma);

			function addToHello(name: string) {
				return `Hello ${name}`;
			}
			console.log(addToHello("Willam"));

			//Funçoes Multi Tipos
			function CallToPhone(phone:number | string) : number | string {
				return phone;
			}

			console.log(CallToPhone(16999885925));

			//Funçoes Async
			async function getDatabase(id: number): Promise<number | string> {
				return "William";
			}
	**CLASSES**
	
		-TRABALHANDO COM CLASSES
		
		//Classes

		class Character {
			protected name?: string;
			 readonly strenght: number;
			 skill: number;

			constructor( name: string,strenght: number, skill: number) {
				this.name = name;
				this.strenght = strenght;
				this.skill = skill
			}

			 public attack(): void {
				console.log(`Attack with ${this.strenght} points`)
			}
		}
		
		- DATA MODIFIERS
		
		 //Data Modifiers -Modificadores de acesso

		 /*
			public - acessa dentro e fora da classe, por default é publico
			private - é acessada somente na classe e tem que passar oa 
			propriedade pelo metodo construtor para
			protected - Só pode ser acessado dentro da classe e de sub classes 
			que herdam essa classe
			readonly -somente leitura, nã consegue setar do lado de fora da 
			classe

			Os datas modifiers acima , também são aplicados em metodos também
		*/ 

		/*o que influência nas classes  - o status da classe, se é privada , publica 
		protegida , somente leitura */
		
		-SUBCLASS
		
		//Subclasses

		//Character: superclass - classe pai
		//Magician: subclass -classe filha
		//super() é para invocar o construtor da classe pai (Character)

		class Magician extends Character{
			magicPoints: number;
			constructor(name: string,strenght: number, skill: number, magicPoints: number){
				super(name, strenght, skill);
				this.magicPoints = magicPoints;        
			}   
		}

		const p1 = new Character("William",10, 98);
		const p2 = new Magician("Mago", 09, 30, 100);
		p1.skill = 12;
		
	**GENERICS**
	
		-O PROBLEMA QUE O GENERIC RESOLVE

		//Generics

		function concatArray(...items: any[]):any[] {
			return new Array().concat(...items);
		}

		const numArray = concatArray([1, 5], [4]);
		const stgArray = concatArray(["william", "Ryu"], ["Ken"]);
		console.log(numArray);
		console.log(stgArray);

		numArray.push("Chung lee"); /*com o tipo any vc pode 
		acrescentar qualquer tipo de varivel  */

		console.log(numArray);//[ 1, 5, 4, 'Chung lee' ]
		

		-UTLIZANDO GENERIC NA PRATICA
		
		//Utilizando Generics na prática

		function concatArray1<T>(...items: T[]):T[] {
			return new Array().concat(...items);
		}

		const numArray1 = concatArray1<number[]>([1, 5], [4]);
		const stgArray1 = concatArray1<string[]>(["william", "Ryu"], ["Ken"]);
		console.log(numArray1);
		console.log(stgArray1);

		numArray1.push("Chung lee"); /*Agora verificamos que acrescentar uma varivel do
		tipo string na const NumArray ele não vai aceitar, pois tipamos na hora
		de passar a varivel */

		console.log(numArray);

	**TS NODE DEV**
	
		-TRABALHANDO COM TS NODE DEV
		
		Temos uma maneira de executar os TS sem gerar build toda hora
		
		vamos instalar um servidor :
		
		npm install ts-node-dev -D  ---um servidor local que entende TypeScript
		
		no package.json:
		
		acrescente no scripts :
		"start-dev": "ts-node-dev --respawn --transpile-only src/index.ts",
		
		pra rodar no console:
		
		npm run start:dev
		
		ele não criará o build e restartará automaticamente em qualquer mudança
		
	**DECORATORS**

		-O PRINCIPIO DO DECORATORS**
		
		Decora uma função e passa para a classe desejada
		
		
		
		Para habilitar a opção experimentalDecorators acesse o tsconfig.json e decomente a linha
		
		function ExibirNome( target: any){
			console.log(target);
		}

		@ExibirNome
		class Funcionario {}

		@ExibirNome
		class Quincas{}
		
		-CLASS DECORATORS
		 Quando roda o comando npm run start:dev ele injeta dinamicamente na classe o decorators
		 
		 function apiVersion(version: string) {
			return (target: any) => {
				Object.assign(target.prototype, { __version: version, __name: "William"});
			};
		}

		@apiVersion("1.10")
		class Api{}

		const api = new Api();
		console.log(api.__version);
		console.log(api.__name);
		
		-ATRIBUTTE DECORATORS
		
		function minLenght(lenght: number) {
			return (target: any, key: string) => {
			   let _value = target[key];

			   const getter = () => _value;
			   const setter = (value: string) => {
				if (value.length < lenght) {
					throw new Error(`Tamanho menor do que ${lenght}`);
				}
				else{
					_value = value;
				}
			   }

			   Object.defineProperty(target, key, {
				get: getter,
				set: setter,
			   });
			};
		}



		class Api1 {
			@minLenght(10)
			name: string;

			constructor(name: string){
				this.name = name;
			}
		}

		const api1 = new Api1("Produto Fontelas");
		console.log(api1.name);
		
		-CONCLUSÃO
		
		https://github.com/felipeAguiarCode/angular-playground/tree/main/C2%20-%20Typescript%20para%20Angular


		 
		 
		
		
		
		


			
			
			
		
		
		
		
		
		
		
		
		
		
		
		
							
		
		
		
		
		
		
		
		
			
		  

		
		
		
		
		
		
		
		
		
		
	
		
		
			
	

		
		