	---------------------------------------------------------------------------------------------------------
	***************************** TRABLHANDO COM COMPONENTES ANGULAR ****************************************
	----------------------------------------------------------------------------------------------------------
	
	
	ENTENDENDO A COMPOSIÇÃO DE COMPONENTES
	
		O que são Componentes 
		
			Um elemento que seja visual, customizavel e replicavel
			
			É o átomo da sua aplicação
			
			Geralmente é uma função JS/TS que retorna HTML, CSS  e carrega eventos Javascript
			
		Como minha aplicação é montada ?

			-A composição dos componentes através de Injeção dependencias
			-Injeção de dependencia é um padrão de desenvolvimento utilizada em diversos cenários diferentes, é uma estratégia de desenvolvimento muito utilizada
			-Uma injeção é feita quando algo depende de outra coisa para o seu funcionamento, mas ele não produz diretamente esse conteúdo, tendo a dependência de algum agente externo.
			
						Fluxo de como a sua aplicação é montada
				
			Banner Component 
			Card Component  ---------------------> APP-ROOT ---------->HTML(index.html)
			Video Component	
	
		
		USANDO O STACKBLITZ.COM
		
			angular.io
			
			Projetos online stackblitz.com ---> ANGULAR front-end
		
		ARQUIVO SRC OUT (FORA DA PASTA SRC)
		
			src - tudo que vc vai codar
			 
			fora, arquivos de configuração:
			 
				-tsconfig.json - configuração para o TypeScript 
				-package.jason - arquivo coração do Node , trazedno as infos dos projetos  o node que processa 
				-angular.json - config do angular
			
			src - main.ts - arquivo principal
			
			
		ARQUIVO SRC IN (DENTRO DA PASTA SRC)	
			
			src 
			  index.html 
			  main.ts - arquivo principal
			  polifills.ts - config para  compatibilidade com navegadores antigos	
			  styles.css - 	estilo global
			
			  app
				app.components.css 
				app.components.html
				app.components.ts
				app.module.ts
				hello.components.ts
				
		COMPARANDO COM ESTRUTURA DE ARQUIVOS REACT E VUE

			O conceito é o mesmo para React e Vue
			
		----------------------------------------------------------------------------------------------
	
	CRIANDO COMPONENTES NA PRÁTICA

		ENTENDENDO O SCOPED
		
			O css de um componente ele é a nivel de scoped, ele vai afetar somente o elemento do proprio 
			componente.
			
		CONTRATOS PARA SE CRIAR UM COMPONENTE
			
			Interface(contrato):
			
			import { Component, VERSION } from '@angular/core'; 
			
			Decorator:
			
			@component({
				selector: 'hello',
				template: `<h1> Hello {{name}}!</h1>`, ---podemos passar o arquivo como inline ou em URL 
				styles: [`h1 { font-family: Lato; } ´] ---podemos passar o arquivo como inline ou em URL 
			})
			
			export:
			
			export class AppComponent {
			  name = 'Angular ' + VERSION.major;
			}
			
		CRIANDO REGISTRANDO UM COMPONENTE ANGULAR SIMPLES

			
			Crie uma pasta dentro de app chamada components , e dentro da pasta Components, e crie um componente novo menu.component.ts
			
			Vamos importar do Angular o contrato:
			
			import { Component } from '@angular/core';
			
			Temos que colocar o decorator e o export da classe:
			
			@Componente({
			
			})
			
			export class MenuComponent {
			
			}
			
			depois vamos criar o selector, template e styles dentro do componente
			
			@Componente({
				selector: 'menu-component',
				template: '<h2>William</h2>,
				styles: ['h2{ color: blue'],
				
			})
			
			export class MenuComponent {
			
			}
			
			Vamos declarar o arquivo dentro do arquivo de modulo o app.module.ts e declarar lá:
			
			import {MenuComponent} from './components/menu-component';
			
			ainda dentro do modulo declarar o novo componente dentro do @NgModule em declaration, detro do [MenuComponent]
			
			Após isso injetar no arquvio html 
			
	
	CRIANDO COMPONENTES REUTILIZÁVEIS

		CRIANDO A ESTRUTURA DE UM COMPONENTE
		
			Dentro da pasta components , vamos criar outro componente button.component.ts
			
			dentro vamos criar o button html e css:
			
			button.component.html e o button.component.css
			
			Dentro do button.component.ts:
			
			import { Component } from '@angular/core';
			
			@Component({
				selector: 'my-button',
				templateUrl: './button.component.html',
				styleUrls: ['./button.component.css'],
			})
			
			export class Button {}
			
			Dentro do arquivo button.component.html, vamos colocar:
			
			<div>
				<button>click aqui</button>
			</div>
			
			Após isso vamos registrar no module app.module:
			
			import { Button } from './components/button.component'; e no declarations colocar o Button
			
			Dentro do app.component.ts vamos colocar o button:
			
			<my-button></my-button>
			
		
		INTERPOLAÇÃO DE DADOS	
		
			Dentro da Classe export vamos definir as propriedades:
			
			export class Button {
				buttonText: string = 'ACESSAR';
				buttonNumber: number = 1;
				buttonTexts: string[] = ['VENDER', 'COMPRAR'];
				buttonObject = {
					label: 'adicionar ao carrinho',
				};	
			}
			
			Agora vamos chamer no html (button.components.html):---posso passar varios types dentro da tag button
			
				<div>
					<button>{{buttonText}}</button>  
				</div>
				
				<div>
					<button>{{buttonTexts[1]}}</button>  ---selecionando a posição 1 no array  
				</div>
				
				<div>
					<button>{{buttonNumber}}</button>  ----do tipo number
				</div>
				
				<div>
					<button>{{buttonObject.label}}</button>  
				</div>
		
		ESTILO GLOBAL VS SCOPED		
		
			Todo componente tem sua folha de estilo e temos o styles.css que é global, tudo que vc fizer nesse styles vai refletir no projeto inteiro.
			
			Diferente do que scoped ex: button.component.css que somente funciona com o componente especifico , no caso do exemplo o button.component.ts, lembrando que o componente sempre vai dar preferência pelo o scoped dele, e na ausência do scoped o component vai puxar do global.
			
		MÚLTIPLOS ESTILOS NO COMPONENTE

			No style.css (global) colocamos :
			
				button {
				padding: 10px;
				border-radius: 10px
				}
				
				e no scoped button.component.css:
				
				.button{
					backgroung-color: aqua;
				}

			O resultado é que ele vai mesclar os estilos pois o atributo padding e  border-radius foi definido somente no global.
			
		
		FAZENDO SEUS COMPONENTES CONVERSAREM	
			
				app.component.html ----pai

				<my-button></my-button> ---filho do componente acima, pois esta dentro do app.component
			
			Vamos compartilhar uma coisa do pai para o filho, dentro do app.component.ts dentro de export vamos criar uma propriedade :
			
				export class AppComponent {
					name = 'Angular ' + VERSION.major;
					buttonLabel: string = "CARRINHO";
					buttonSecond: string = 'ADICIONAR A FAVORITOS';
				}
				
			Agora vamos passar a propriedade dentro do app.component.html:

				<my-button [label]="buttonLabel"></my-button>
				<my-button [label]="buttonSecond"></my-button>
				
			Agora para passar para dentro do button.component.ts, ele vai receber uma propriedade label dentro de export :
			
				export class Button {
					label:string = '';	
				}

			E no import vamos passar o Input:

				import { Component, Input} from '@angular/core';
			
				export class Button {
					@Input() label:string = '';	 ---iputasmos a propriedade pai no filho
				}
			

			Agora no button.component.html:
			
				<div>
					<button>{{ label }}</button>
				</div>
				
			Dai ele vai puxar do component pai 	fazendo so componentes se conversarem
			
			
		INPUTANDO VALORES NO SEU COMPONENTE
		
			<my-button label="{{ buttonLabel }}"></my-button>  --esperando uma variavel
			<my-button [label]="buttonSecond"></my-button>
			
			ou podemos declarar um valor :
			
			<my-button label="noticia"></my-button> ---sem {{}} ele esta esperando um texto
			

		AS 4 MANEIRAS POSSÍVEIS DE SE PASSAR VALORES PARA COMPONENTES
		
			<my-button label="{{ buttonLabel }}"></my-button>  --esperando uma variavel
			<my-button [label]="buttonSecond"></my-button>
			
			
			<my-button label="noticia"></my-button> ---sem {{}} ele esta esperando um texto
			<my-button [label]="'CARRINHO'"></my-button>
		
	---------------------------------------------------------------------------------------------
	BINDING SYNTAX

		DATA BINDING ---vide Documentação
		
			É a comunicação entre a parte lógica do TypeScript com parte visual do elemento chamamos 
			de Data binding, a recomendação é usar com colchetes[]
			
				<my-button [label]="buttonSecond"></my-button>
				<my-button [label]="'CARRINHO'"></my-button>
				
		
		TIPOS DE BINDING

			{{ VALOR}} --- Interpolação
			
			[propriedade] = "valor" --- Property binding
			
			(evento) = "Handler" ---Event binding
			
			[(ngModel)] = "propriedade" ---Two way data binding
			
		
		EVENT BINDING
			
			<!-- data binding = associação de dados -->
			
			<!-- interpolação -->
			<my-button label="noticia></button>
			<my-button label="{{ buttonLabel }}"></my-button>
		
			<!-- property binding -->
			<my-button [label]="buttonSecond"></my-button>
			<my-button [label]="'CARRINHO'"></my-button>
			
			
		 vimos a interpolação e o property binding , agora vamos ver o event binding

			Dentro de button.component.ts abaixo do export , vamos criar uma função:
			
				getAlert(){
					alert("ola");
				}

			ou se quiser deixar mais dinamico
			
				getAlert(){
					alert(this.label);
				}
			
			Agora dentro do button.component.html:
			
			
				<div>
					<button (click)="getAlert()">{{ label }}</button>
				</div>
			
			PS:***os eventos são padrões do html **** consulte a documentação na mozilla em events***
			
			
			
		PARÂMETROS NO EVENT BINDING

			Poderia também passar um parâmetro para event binding :
			
				getAlert(num: number){
					alert(num);
				}			
				
				
				<div>
					<button (click)="getAlert(14)">{{ label }}</button>
				</div>
			O event binding comunica do html para o typeScript
			

		TWO WAY DATA BINDING

			Ambos se comunicam um com o outro html comunica com typescript e typeScript comunica com html
			
			Vamos criar um componente clicando com o botão direito do mouse em cima da pasta component e selecionando  Angular Generator > Component e nomea-lo de entry-data, dai ele criará os três   components  html, css e ts dentro de uma pasta nomeda de entry-data.			
			
			
			Vamos declarar no app.module.ts o import:
			
			import { EntryDataComponent } from './components/entry-data.component';
			
			e colocar a classe EntryDataComponent no declarations.
			
			Apos isso vamos testar colocanco selector do componente  dentro do app.components.html:
			
			<!--Two way data binding-->
			<app-entry-data></app-entry-data>
			
			Ok,vamos trabalhar com entry-data:
			
			No ts do entry-data, no export:
			
			export class EntryDataComponent {
				placeholder:string = "email"
			}
			
			Dentro do componente html do entry-data :
			
			vamos associar a propriedade da classe no componente:

			<input 					---property binding
				type="text" 
				[value]="placeholder"
				(input)="placeholder = $any($event.target).value" ---evento disparando uma ação para a parte logica
				/>  
			<p>{{ placeholder }}</p>  ---interpolação
			
		
		USANDO A DIRETIVA NGMODEL

				export class EntryDataComponent {
					placeholder:string = "email"
					placepass:string = "senha"
				}
				
			vamos fazer a união dos colchetes com os parentes para usar o ngmodel:
			
				<input
					type="text"
					[(ngModel)]="placepass"
				/>
				
				<p>{{ placepass }} </p>	
				
		ANGULAR FORMS
		
			No app.module tem a importação especifica para trabalhar com forms:
			
			import { NgModule } from '@angular/core';
			import { FormsModule } from '@angular/core';
			
		STYLE BINDING

			biding de css  no entry-data.component.html:
			
				<input type="text" [(ngModel)]="placepass"/>
				<p [style.color]="color">{{ placepass }}</p>
				
			e dentro do do entry-data.component.ts:
			
					export class EntryDataComponent {
						placeholder:string = "email"
						placepass:string = "senha"
						color:string="red"				
					}

		---------------------------------------------------------------------------------------------------

			****Download do projeto*****
			
				
					
				
			
			
			
			
			
			
			
			
				
			
			
			
		
			

			
			
			
			
			
			
			
		
			
			
			
			
			
			
			
			
			
			
			
			
			

			  
					
		 
		 
		 
		
		
		
		
		